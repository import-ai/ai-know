// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/sidebar/entries": {
            "post": {
                "description": "Create an entry with the specified properties.\n|      Field      | Required |      Description      |\n| :-------------: | :------: | :-------------------: |\n|      title      |   Yes    |  Title of new entry   |\n|      type       |   Yes    |   Type of new entry   |\n|     parent      |   Yes    |    Parent entry ID    |\n| posistion_after |    No    | Position of new entry |\n\nIf ` + "`" + `position_after` + "`" + ` is empty, the new entry will be the first in parent's sub-entries. Otherwise, it's positioned after the specified sub-entry.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Create Entry",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateEntry.Req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateEntry.Resp"
                        }
                    }
                }
            }
        },
        "/api/sidebar/entries/{entry_id}": {
            "get": {
                "description": "Get properties of an entry.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Get Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entry ID",
                        "name": "entry_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetEntry.Resp"
                        }
                    }
                }
            },
            "put": {
                "description": "Update properties of an entry.\n|      Field      | Required |      Description      |\n| :-------------: | :------: | :-------------------: |\n|      title      |    No    |  Title of the entry   |\n|     parent      |    No    |    Parent entry ID    |\n| posistion_after |    No    | Position of the entry |\n\n\u003e - If ` + "`" + `title` + "`" + ` is non-empty, update title of the entry.\n\u003e - If ` + "`" + `parent` + "`" + ` is non-empty, move the entry to the specified parent entry.\n\u003e     - If ` + "`" + `position_after` + "`" + ` is empty, the new entry will be the first in parent's sub-entries. Otherwise, it's positioned after the specified sub-entry.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Update Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entry ID",
                        "name": "entry_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PutEntry.Req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PutEntry.Resp"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an entry and all its sub-entries.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Delete Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entry ID",
                        "name": "entry_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/sidebar/entries/{entry_id}/duplicate": {
            "post": {
                "description": "Duplicate an entry.\n|      Field      | Required |      Description      |\n| :-------------: | :------: | :-------------------: |\n|      title      |    No    |  Title of new entry   |\n|     parent      |   Yes    |    Parent entry ID    |\n| posistion_after |    No    | Position of new entry |\n\nIf ` + "`" + `title` + "`" + ` is empty, it will default to the old entry’s title.\nIf ` + "`" + `position_after` + "`" + ` is empty, the new entry will be the first in parent's sub-entries. Otherwise, it's positioned after the specified sub-entry.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Duplicate Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entry ID",
                        "name": "entry_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DuplicateEntry.Req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DuplicateEntry.Resp"
                        }
                    }
                }
            }
        },
        "/api/sidebar/entries/{entry_id}/sub_entries": {
            "get": {
                "description": "Get sub-entries of an entry.",
                "tags": [
                    "Sidebar"
                ],
                "summary": "Get Sub-Entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entry ID",
                        "name": "entry_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetSubEntries.Resp"
                        }
                    }
                }
            }
        },
        "/api/workspace": {
            "get": {
                "description": "Get properties of current workspace.",
                "tags": [
                    "Workspace"
                ],
                "summary": "Get Workspace",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetWorkspace.Resp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateEntry.Req": {
            "type": "object",
            "properties": {
                "parent": {
                    "type": "string",
                    "example": "10000003"
                },
                "position_after": {
                    "type": "string",
                    "example": "10000002"
                },
                "title": {
                    "type": "string",
                    "example": "Note Title"
                },
                "type": {
                    "type": "string",
                    "example": "note"
                }
            }
        },
        "handlers.CreateEntry.Resp": {
            "type": "object",
            "properties": {
                "entry": {
                    "$ref": "#/definitions/handlers.Entry"
                }
            }
        },
        "handlers.DuplicateEntry.Req": {
            "type": "object",
            "properties": {
                "parent": {
                    "type": "string",
                    "example": "10000003"
                },
                "position_after": {
                    "type": "string",
                    "example": "10000002"
                },
                "title": {
                    "type": "string",
                    "example": "Note Title"
                }
            }
        },
        "handlers.DuplicateEntry.Resp": {
            "type": "object",
            "properties": {
                "entry": {
                    "$ref": "#/definitions/handlers.Entry"
                }
            }
        },
        "handlers.Entries": {
            "type": "object",
            "properties": {
                "private": {
                    "type": "string",
                    "example": "1000001"
                },
                "team": {
                    "type": "string",
                    "example": "1000002"
                }
            }
        },
        "handlers.Entry": {
            "type": "object",
            "properties": {
                "has_sub_entries": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "string",
                    "example": "1000005"
                },
                "title": {
                    "type": "string",
                    "example": "Note Title"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "note",
                        "group",
                        "link"
                    ],
                    "example": "note"
                }
            }
        },
        "handlers.GetEntry.Resp": {
            "type": "object",
            "properties": {
                "entry": {
                    "$ref": "#/definitions/handlers.Entry"
                }
            }
        },
        "handlers.GetSubEntries.Resp": {
            "type": "object",
            "properties": {
                "sub_entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.Entry"
                    }
                }
            }
        },
        "handlers.GetWorkspace.Resp": {
            "type": "object",
            "properties": {
                "entries": {
                    "$ref": "#/definitions/handlers.Entries"
                }
            }
        },
        "handlers.PutEntry.Req": {
            "type": "object",
            "properties": {
                "parent": {
                    "type": "string",
                    "example": "10000003"
                },
                "position_after": {
                    "type": "string",
                    "example": "10000002"
                },
                "title": {
                    "type": "string",
                    "example": "Note Title"
                }
            }
        },
        "handlers.PutEntry.Resp": {
            "type": "object",
            "properties": {
                "entry": {
                    "$ref": "#/definitions/handlers.Entry"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "AIKnow API",
	Description:      "## Sidebar 多级列表\n\n列表的每一项是一个`entry`，主要字段是`id`，`type`和`title`。\n\n- `id`: 全局唯一标识\n- `type`: 合法取值为`note`，`group`或`link`\n- `title`: 标题\n\n一个`entry`下可以嵌套子`entry`，形成树形结构。\n\n### 查询流程\n\n1. 调用`Get Workspace`拿到 Private 和 Team Space 分别对应的最外层`entry id`。\n2. 调用`Get Sub-Entries`，传参`entry id`，拿到该`entry`直接嵌套的子`entry`列表。\n3. 如果子`entry`继续嵌套子`entry`（`has_sub_entries`为`true`），递归调用`Get Sub-Entries`。\n\n### 拖拽/移动流程\n\n调用`Update Entry`，更新`entry`的`parent`和`position`。",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
