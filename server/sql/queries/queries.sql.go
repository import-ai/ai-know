// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSidebarEntry = `-- name: CreateSidebarEntry :one
INSERT INTO sidebar_entries(type, title, parent_id, first_child_id, next_brother_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, title, parent_id, first_child_id, next_brother_id, created_at, updated_at
`

type CreateSidebarEntryParams struct {
	Type          SidebarEntryType
	Title         string
	ParentID      pgtype.Int8
	FirstChildID  pgtype.Int8
	NextBrotherID pgtype.Int8
}

func (q *Queries) CreateSidebarEntry(ctx context.Context, arg *CreateSidebarEntryParams) (*SidebarEntry, error) {
	row := q.db.QueryRow(ctx, createSidebarEntry,
		arg.Type,
		arg.Title,
		arg.ParentID,
		arg.FirstChildID,
		arg.NextBrotherID,
	)
	var i SidebarEntry
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Title,
		&i.ParentID,
		&i.FirstChildID,
		&i.NextBrotherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces(id, private_sidebar_entry, team_sidebar_entry)
VALUES ($1, $2, $3)
RETURNING id, private_sidebar_entry, team_sidebar_entry, created_at, updated_at
`

type CreateWorkspaceParams struct {
	ID                  int64
	PrivateSidebarEntry int64
	TeamSidebarEntry    int64
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg *CreateWorkspaceParams) (*Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace, arg.ID, arg.PrivateSidebarEntry, arg.TeamSidebarEntry)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.PrivateSidebarEntry,
		&i.TeamSidebarEntry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getSidebarEntry = `-- name: GetSidebarEntry :one
SELECT id, type, title, parent_id, first_child_id, next_brother_id, created_at, updated_at
FROM sidebar_entries
WHERE id = $1
`

func (q *Queries) GetSidebarEntry(ctx context.Context, id int64) (*SidebarEntry, error) {
	row := q.db.QueryRow(ctx, getSidebarEntry, id)
	var i SidebarEntry
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Title,
		&i.ParentID,
		&i.FirstChildID,
		&i.NextBrotherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, private_sidebar_entry, team_sidebar_entry, created_at, updated_at
FROM workspaces
WHERE id = $1
`

func (q *Queries) GetWorkspace(ctx context.Context, id int64) (*Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.PrivateSidebarEntry,
		&i.TeamSidebarEntry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateFirstChild = `-- name: UpdateFirstChild :one
UPDATE sidebar_entries
SET first_child_id = $1
WHERE id = $2
  AND first_child_id = $3
RETURNING id, type, title, parent_id, first_child_id, next_brother_id, created_at, updated_at
`

type UpdateFirstChildParams struct {
	NewVal pgtype.Int8
	ID     int64
	OldVal pgtype.Int8
}

func (q *Queries) UpdateFirstChild(ctx context.Context, arg *UpdateFirstChildParams) (*SidebarEntry, error) {
	row := q.db.QueryRow(ctx, updateFirstChild, arg.NewVal, arg.ID, arg.OldVal)
	var i SidebarEntry
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Title,
		&i.ParentID,
		&i.FirstChildID,
		&i.NextBrotherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateNextBrother = `-- name: UpdateNextBrother :one
UPDATE sidebar_entries
SET next_brother_id = $1
WHERE id = $2
  AND next_brother_id = $3
RETURNING id, type, title, parent_id, first_child_id, next_brother_id, created_at, updated_at
`

type UpdateNextBrotherParams struct {
	NewVal pgtype.Int8
	ID     int64
	OldVal pgtype.Int8
}

func (q *Queries) UpdateNextBrother(ctx context.Context, arg *UpdateNextBrotherParams) (*SidebarEntry, error) {
	row := q.db.QueryRow(ctx, updateNextBrother, arg.NewVal, arg.ID, arg.OldVal)
	var i SidebarEntry
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Title,
		&i.ParentID,
		&i.FirstChildID,
		&i.NextBrotherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
